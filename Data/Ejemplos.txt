 public System.Collections.Generic.List<dynamic> listarReturnAnonimo()
            {
                sqlQuery = "select * from users";
                using (SqlConnection sqlCn = new SqlConnection(this.cnBD))
                {
                    var lista = sqlCn.Query(sqlQuery).ToList();
                    return lista;
                }

}


 public List<Entity.UsuarioBE> listar()
        {
            sqlQuery = "select * from " + bdEsquema + bdTabla + " where aud_es_eli_b=0";

            using (SqlConnection sqlCn = new SqlConnection(this.cnBD))
            {
                var lista = sqlCn.Query<Entity.UsuarioBE>(sqlQuery).ToList();
                return lista;
            }
        }


 public List<Entidad.MaestroCabecera> listarMultiple()
        {
            //sqlQuery = "select top 10  [login],[password],[encargado] as ApellidosyNombres from users;" +
            //            "select id_maestro as grupoMaestro, ciamaestro as codigoMaestro, descrip as descripcion from maestros order by ciamaestro desc" ;

            sqlQuery = "select top 10  [login],[password],[encargado] as ApellidosyNombres from users;" +
                        "select id_maestro, ciamaestro, descrip from maestros order by ciamaestro desc";


            FluentMapper.Initialize(config => { config.AddMap(new MaestroCabeceraMap()); });

            using (SqlConnection sqlCn = new SqlConnection(this.cnBD))
            {
                using (var multi=sqlCn.QueryMultiple(sqlQuery))
                {
                    var listaUsuarios = multi.Read<Entidad.Usuario>().ToList();
                    var listaMaestroCabecera =multi.Read<Entidad.MaestroCabecera>().ToList();
                    return listaMaestroCabecera;
                }                    
            }

        }


        public int agregar(Entity.UsuarioBE entidad)
        {

            int value = 0;
            string login = entidad.nombres.Substring(0, 1).ToString() + entidad.primerApellido.ToString();

            entidad.login = login.ToUpper();
            entidad.clave = entidad.clave;


            sqlQuery = "insert into [sch_seguridad].[usuario_mae] (fk_per_id,login_c,clave_v,clave_nue_b,pri_ape_c,seg_ape_c,pre_nom_c,num_doc_c,fk_are_id,fk_cgo_id," +
                            "correo_ins_c,estado_n," +
                        "aud_id_usu_cre_n,aud_fec_cre_f,aud_id_usu_mod_n,aud_fec_mod_f,aud_pc_ip_c,aud_pc_host_c,aud_es_eli_b) " +
                        " values (@fk_per_id,@login_c,convert(varbinary(256),@clave_v),@clave_nue_b,@pri_ape_c,@seg_ape_c,@pre_nom_c,@num_doc_c,@fk_are_id,@fk_cgo_id," +
                            "@correo_ins_c,@estado_n,@aud_id_usu_cre_n," +
                        "@aud_fec_cre_f,@aud_id_usu_mod_n,@aud_fec_mod_f,@aud_pc_ip_c,@aud_pc_host_c,0)";

            using (SqlConnection sqlCn = new SqlConnection(this.cnBD))
            {
                value = sqlCn.Execute(sqlQuery, new
                {
                    fk_per_id = entidad.idPersona,
                    login_c = entidad.login,
                    clave_v = entidad.clave,
                    clave_nue_b = entidad.nuevaClave,
                    pri_ape_c = entidad.primerApellido,
                    seg_ape_c = entidad.segundoApellido,
                    pre_nom_c = entidad.nombres,
                    num_doc_c = entidad.numeroDocumento,
                    fk_are_id = entidad.idArea,
                    fk_cgo_id = entidad.idCargo,
                    correo_ins_c = entidad.correoInstitucional,
                    estado_n = entidad.idEstado,
                    /*auditoria*/
                    aud_id_usu_cre_n = entidad.idUsuarioLogin,
                    aud_fec_cre_f = DateTime.Now,
                    aud_id_usu_mod_n = entidad.idUsuarioLogin,
                    aud_fec_mod_f = DateTime.Now,
                    aud_pc_ip_c = entidad.pcIp,
                    aud_pc_host_c = entidad.pcHost,
                });
                return value;
            }
        }



